     <xml xmlns="http://www.w3.org/1999/xhtml" collection="false">
      import requests
import time

API_KEY = 'your_api_key_here'  # Replace with your Denara API key
BASE_URL = 'https://api.denara.com'  # Replace with the actual base URL
headers = {'Authorization': f'Bearer {API_KEY}'}

# Define your parameters
TARGET_PROFIT = 50.00  # Target profit in USD
TRADE_QUANTITY = 1  # Number of units to trade
TRADING_PAIR = 'BTCUSD'  # Replace with your trading pair
total_profit = 0  # Initialize total profit

def get_market_data(symbol):
    response = requests.get(f'{BASE_URL}/market/{symbol}', headers=headers)
    return response.json()

def place_order(symbol, quantity, order_type):
    order_data = {
        'symbol': symbol,
        'quantity': quantity,
        'type': order_type  # 'buy' or 'sell'
    }
    response = requests.post(f'{BASE_URL}/order', json=order_data, headers=headers)
    return response.json()

def main():
    global total_profit

    while total_profit < TARGET_PROFIT:
        market_data = get_market_data(TRADING_PAIR)
        current_price = market_data['price']  # Adjust based on actual response structure
        
        # Check if the price matches the digit scanned by Denara
        digit_match = market_data.get('digit_match')  # Replace with actual key for digit match
        if current_price == digit_match:
            print(f"Buying {TRADE_QUANTITY} of {TRADING_PAIR} at {current_price}")
            buy_order_response = place_order(TRADING_PAIR, TRADE_QUANTITY, 'buy')
            buy_price = current_price
            
            # Assuming we have a way to track the bought price
            target_sell_price = buy_price + TARGET_PROFIT / TRADE_QUANTITY
            print(f"Target sell price set at {target_sell_price}")

            # Monitor for reaching the target sell price
            while total_profit < TARGET_PROFIT:
                market_data = get_market_data(TRADING_PAIR)
                current_price = market_data['price']
                if current_price >= target_sell_price:
                    print(f"Selling {TRADE_QUANTITY} of {TRADING_PAIR} at {current_price}")
                    sell_order_response = place_order(TRADING_PAIR, TRADE_QUANTITY, 'sell')
                    # Calculate profit made on this trade
                    profit_made = (current_price - buy_price) * TRADE_QUANTITY
                    total_profit += profit_made
                    print(f"Total profit is now: {total_profit}")
                    break  # Exit inner loop to check for new trades

        time.sleep(60)  # Wait for a minute before checking again

    print("Target profit reached. Stopping the bot.")

if __name__ == "__main__":
    main()
